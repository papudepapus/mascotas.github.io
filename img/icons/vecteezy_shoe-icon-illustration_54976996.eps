%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: -1 -1 3001 3001 
%%LanguageLevel: 3
%%Creator: CorelDRAW
%%Title: Desain_20250112_091932_001.eps
%%CreationDate: Sun Jan 12 09:19:32 2025
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 3 def
%Build: CorelDRAW Version 17.1.0.572
/EpsFile true def
%%BeginResource: procset wCorel17Dict 17.0 0
/wCorel17Dict 300 dict def wCorel17Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/rp{{pop}repeat}bd/dexec{
exch begin cvx exec end}bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np
/newpath ld/Tl/translate ld/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd
/spg/showpage ld/showpage{}bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf
xd/$sdf false def/$SDF false def/$Scra 0 def/SetScr/setscreen ld/@ss{2 index 0
eq{$dsf 3 1 roll 4 -1 roll pop}if exch $Scra add exch load SetScr}bd
/SeparationMode where{pop}{/SeparationMode/Composite def}ifelse
/SeparationPlateName where{pop}{/SeparationPlateName null def}ifelse
/SeparateInColor where{pop}{/SeparateInColor false def}ifelse/EpsFile where
{pop}{/EpsFile false def}ifelse/FillOverprint false def/$fil 0 def
/OutlineOverprint 0 def/$PF false def/$bkg false def/CurrentOverprint false def
matrix currentmatrix/$ctm xd/$ptm matrix def/$ttm matrix def/$stm matrix def
/$ffpnt true def/CorelDrawReencodeVect[16#0/grave 16#5/breve 16#6/dotaccent
16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi
16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/get_ps_level/languagelevel where{pop systemdict/languagelevel get exec}{1}
ifelse def/Level2 get_ps_level 2 ge def/Level3 get_ps_level 3 ge def
/AdobeDistiller/product where{pop systemdict/setdistillerparams known product
(Adobe PostScript Parser)ne and}{false}ifelse def/InRipSeparation
AdobeDistiller{false}{Level2{currentpagedevice/Separations 2 copy known{get}{
pop pop false}ifelse}{false}ifelse}ifelse def/ColorSeparationLevel1 1 0 0 0
gsave setcmykcolor currentcmykcolor grestore add add add 0 ne 0 1 0 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 1 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 0 1 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne and and and not def
/ColorSeparation/LumSepsDict where{pop false}{/AldusSepsDict where{pop false}{
InRipSeparation{true}{ColorSeparationLevel1}ifelse}ifelse}ifelse def
/IsColorDevice/deviceinfo where{pop deviceinfo/Colors known{deviceinfo/Colors
get exec 1 gt}{false}ifelse}{/statusdict where{pop statusdict/processcolors
known{statusdict/processcolors get exec 1 gt}{false}ifelse}{false}ifelse}
ifelse def/get_simulate_devicen get_ps_level 2 eq{{SeparationMode/OnHost ne
InRipSeparation AdobeDistiller or and}bind}{false}ifelse def/DocGrayScaleSpace
[/DeviceGray]def/DocRgbSpace[/DeviceRGB]def/DocCmykSpace[/DeviceCMYK]def
/DocLabSpace[/CIEBasedABC <</BlackPoint[0 0 0]/WhitePoint[0.9637 1.0000 0.8241
]/RangeABC[0 100 -128 127 -128 127]/DecodeABC[{16 add 116 div}bind{500 div}
bind{200 div}bind]/MatrixABC[1 1 1 1 0 0 0 0 -1]/DecodeLMN[{dup 0.206897 ge{dup
dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.9637 mul}bind{dup 0.206897
ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 1.0000 mul}bind{dup
0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.8241 mul}bind]
>>]def/validate_cie_colorspace_whitepoint{load dup aload pop/WhitePoint get 1
1.0 put pop}bd/set_cie_colorspaces{/DocGrayScaleSpaceCIE where{pop
/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint/DocGrayScaleSpace xd
DocGrayScaleSpace aload pop begin pop/DecodeA where{pop DecodeA type/arraytype
eq{DecodeA aload pop/DecodeA exch def}if}if end}if/DocRgbSpaceCIE where{pop
/DocRgbSpaceCIE validate_cie_colorspace_whitepoint/DocRgbSpace xd}if
/DocCmykSpaceCIE where{pop/DocCmykSpaceCIE validate_cie_colorspace_whitepoint
/DocCmykSpace xd}if}bd/set_rendering_intent{Level3{findcolorrendering{
/ColorRendering findresource setcolorrendering}{dup/DefaultColorRendering eq{
pop}{/ColorRendering findresource setcolorrendering}}ifelse}{pop}ifelse}bd
/findcmykcustomcolor where{pop}{/findcmykcustomcolor{5 array astore}def}ifelse
/setcustomcolor where SeparationMode/OnHost ne and{pop}{/tint_cmyk_color{5 -1
roll dup 1 ge{pop}{4{dup 6 -1 roll mul exch}repeat pop}ifelse}bd
/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{SepsColor not{4 1 roll pop pop pop
1 exch sub SetGry}{SetCmyk_5}ifelse}ifelse}bd/setcustomcolor{exch aload pop
SepMode_5 0 eq{pop tint_cmyk_color setprocesscolor_5}{CurrentInkName_5 eq{4
index}{0}ifelse 6 1 roll 5 rp 1 sub neg SetGry}ifelse}bd}ifelse
/convert_rgb_to_cmyk{dup type/dicttype eq{}{3{1 exch sub 3 1 roll}repeat 3 copy
min min 3{dup 5 -1 roll sub neg exch}repeat}ifelse}bd/safe_setcolorspace{dup
currentcolorspace eq{pop}{setcolorspace}ifelse}bd/safe_setoverprint{dup type
/booleantype eq{dup currentoverprint ne{setoverprint}{pop}ifelse}{1 eq
setoverprint}ifelse}bd/is_cmyk_channel_name{/channel_name xd channel_name/Cyan
eq channel_name/Magenta eq or channel_name/Yellow eq or channel_name/Black eq
or{true}{false}ifelse}bd/is_rgb_channel_name{/channel_name xd channel_name/Red
eq channel_name/Green eq or channel_name/Blue eq or{true}{false}ifelse}bd
/is_spot_channel_name{/channel_name xd channel_name is_cmyk_channel_name
channel_name is_rgb_channel_name or channel_name/Gray eq or{false}{true}ifelse
}bd/spot_tint_transform_proc{/alternativeSpace xd/alternativeColors xd/tint xd
alternativeSpace DocLabSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3
def}{alternativeSpace DocCmykSpace eq{/mixMethod/Subtractive def
/altSpaceNumChannels 4 def}{alternativeSpace DocRgbSpace eq{/mixMethod
/Additive def/altSpaceNumChannels 3 def}{alternativeSpace DocGrayScaleSpace eq
{/mixMethod/Additive def/altSpaceNumChannels 1 def}if}ifelse}ifelse}ifelse
alternativeSpace DocLabSpace eq{alternativeColors aload pop tint mul 3 1 roll
tint mul 3 1 roll dup 100 exch sub 1 tint sub mul add 3 1 roll}{/tintedColor
altSpaceNumChannels{0.0}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def alternativeColors
altChannelIndex get mixMethod/Additive eq{1.0 exch sub tint mul 1.0 exch sub}{
tint mul}ifelse tintedColor altChannelIndex 3 2 roll put}for tintedColor aload
pop}ifelse}bd/devicen_colorant_mixer_proc{/numChannels xd/alternativeSpace xd
/channelNames xd/alternativeColors xd numColorants array astore/colorants xd
/is_spot_channel_name_loc{is_spot_channel_name}bind def alternativeSpace
DocCmykSpace eq{/mixMethod/Subtractive def/altSpaceNumChannels 4 def
/is_spot_channel_name_loc{is_cmyk_channel_name not}bind def}{alternativeSpace
DocRgbSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3 def
/is_spot_channel_name_loc{is_rgb_channel_name not}bind def}{alternativeSpace
DocGrayScaleSpace eq{/mixMethod/Additive def/altSpaceNumChannels 1 def
/is_spot_channel_name_loc{/Gray ne}bind def}if}ifelse}ifelse mixMethod
/Additive eq{/mixedColor altSpaceNumChannels{0.0}repeat altSpaceNumChannels
array astore def/bProcessPlateTinted false def 0 1 numChannels 1 sub{
/channelIndex exch def channelNames channelIndex get is_spot_channel_name_loc
/bSpotChannel xd/sourceChannel colorants channelIndex get def/bWhiteBackground
0 mixedColor{add}forall altSpaceNumChannels div 0.999 gt bProcessPlateTinted
and def bSpotChannel bProcessPlateTinted not and{/bSpotChannel false def}if 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def/mixedChannel mixedColor
altChannelIndex get def sourceChannel alternativeColors channelIndex get
altChannelIndex get 1.0 exch sub mul 1.0 exch sub dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if bSpotChannel{sourceChannel 0.0 gt{mixedChannel mul}{pop
mixedChannel}ifelse}{/bProcessPlateTinted true def globaldict begin
/bSkipDeviceNImage where{pop false}{true}ifelse end DevicenImage and{pop
sourceChannel alternativeColors channelIndex get altChannelIndex get mul
mixedChannel add}{mixedChannel add}ifelse}ifelse dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if mixedColor altChannelIndex 3 2 roll put}for}for}{/mixedColor
altSpaceNumChannels{1}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/targetIndex exch def 0 1 numColorants 1 sub{
/sourceIndex exch def colorants sourceIndex get alternativeColors sourceIndex
get targetIndex get mul 1 exch sub mixedColor targetIndex get mul mixedColor
targetIndex 3 2 roll put}for mixedColor targetIndex 1 mixedColor targetIndex
get sub put}for}ifelse mixedColor aload pop}bd/ColorSpec 9 dict begin/color[]
def/names[]def/num 0 def/ColorModel null def/ColorSpace[]def/set_color{
ColorSeparationLevel1{convert_to_cmyk/color get aload pop setcmykcolor}{
ColorSpace safe_setcolorspace color aload pop setcolor}ifelse}bd
/separate_set_color{SeparationMode/OnHost eq{separate_color{/set_color dexec
true}{pop currentoverprint{false}{SeparateInColor{0 0 0 0 SetCmyk_5 true}{1
SetGry true}ifelse}ifelse}ifelse}{set_color true}ifelse}bd/separate_color{
currentdict false}bd/convert_to_cmyk{currentdict}bd currentdict end def
/GrayscaleColorSpec ColorSpec 9 dict copy begin/names{/Black}def/num 1 def
/ColorModel/Grayscale def/ColorSpace DocGrayScaleSpace def/separate_color{
currentdict false SeparationMode/OnHost eq{SeparationPlateName/Black eq{
SeparateInColor{pop convert_to_cmyk true}{pop true}ifelse}if}if}bd
/convert_to_cmyk{0 0 0 color aload pop 1 exch sub create_cmyk_color}bd
currentdict end def/create_grayscale_color{GrayscaleColorSpec 9 dict copy begin
/color exch 1 array astore def/ColorSpace DocGrayScaleSpace def currentdict end
}bd/RgbColorSpec ColorSpec 9 dict copy begin/names{/Red/Green/Blue}def/num 3
def/ColorModel/Rgb def/ColorSpace DocRgbSpace def/separate_color{
convert_to_cmyk/separate_color dexec}bd/convert_to_cmyk{color aload pop
convert_rgb_to_cmyk create_cmyk_color}bd currentdict end def/create_rgb_color{
RgbColorSpec 9 dict copy begin 3 array astore/color exch def/ColorSpace
DocRgbSpace def currentdict end}bd/HsbColorSpec ColorSpec 9 dict copy begin
/names{/Hue/Saturation/Brightness}def/num 3 def/ColorModel/Hsb def/ColorSpace
DocRgbSpace def/separate_color{convert_to_cmyk/separate_color dexec}bd
/convert_to_cmyk{color aload pop hsb2rgb convert_rgb_to_cmyk create_cmyk_color
}bd/convert_to_rgb{color aload pop hsb2rgb create_rgb_color}bd currentdict end
def/create_hsb_color{HsbColorSpec 9 dict copy begin 3 array astore/color exch
def/ColorSpace DocRgbSpace def currentdict end}bd/CmykColorSpec ColorSpec 9
dict copy begin/names{/Cyan/Magenta/Yellow/Black}def/num 4 def/ColorModel/Cmyk
def/ColorSpace DocCmykSpace def/separate_color{currentdict false
SeparationPlateIndex 0 ge SeparationPlateIndex 3 le and{color
SeparationPlateIndex get dup 0 gt{3 1 roll pop pop SeparateInColor{0 0 0 4
SeparationPlateIndex roll create_cmyk_color true}{1 exch sub
create_grayscale_color true}ifelse}{pop}ifelse}if}bd/convert_to_cmyk{
currentdict}bd currentdict end def/create_cmyk_color{CmykColorSpec 9 dict copy
begin 4 array astore/color exch def/ColorSpace DocCmykSpace def currentdict end
}bd/SpotColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel/Spot def
/set_color{ColorSeparationLevel1{color aload pop get_cmyk_alternative_color
/color get aload pop names aload pop findcmykcustomcolor exch setcustomcolor}{
ColorSpace safe_setcolorspace color aload pop setcolor}ifelse}bd
/separate_color{currentdict false SeparationPlateIndex 4 eq{names aload pop
SeparationPlateName eq{color aload pop dup 0 gt{3 1 roll pop pop
SeparateInColor{pop convert_to_cmyk true}{1 exch sub create_grayscale_color
true}ifelse}{pop}ifelse}if}if}bd/convert_to_cmyk{/alternativeSpace ColorSpace 2
get def/tintTransformProc ColorSpace 3 get def alternativeSpace DocCmykSpace eq
{color aload pop tintTransformProc create_cmyk_color}{alternativeSpace
DocRgbSpace eq{color aload pop tintTransformProc create_rgb_color
/convert_to_cmyk dexec}{alternativeSpace DocGrayScaleSpace eq{0 0 0 color aload
pop 1 sub create_cmyk_color}{0 0 0 1 create_cmyk_color}ifelse}ifelse}ifelse}bd
/get_cmyk_alternative_color{/alternativeSpace ColorSpace 2 get def
alternativeSpace DocCmykSpace eq{alternativeColor aload pop create_cmyk_color}
{alternativeSpace DocRgbSpace eq{alternativeColor aload pop create_rgb_color
/convert_to_cmyk dexec}{alternativeSpace DocGrayScaleSpace eq{alternativeColor
aload pop create_grayscale_color/convert_to_cmyk dexec}{0 0 0 1
create_cmyk_color}ifelse}ifelse}ifelse}bd currentdict end def
/create_spot_colorspace{load/alternativeSpace xd/alternativeColor xd/name xd[
/Separation name alternativeSpace[alternativeColor alternativeSpace
/spot_tint_transform_proc cvx]cvx]}bd/create_spot_color{SpotColorSpec 9 dict
copy begin dup type/arraytype ne{create_spot_colorspace}if/ColorSpace xd/color
exch 1 array astore def ColorSpace 1 get 1 array astore/names xd currentdict
end}bd/DevicenColorSpec SpotColorSpec 9 dict copy begin/ColorModel/DeviceN def
/set_color{Level3{ColorSpace safe_setcolorspace color aload pop setcolor}{
ColorSpace 2 get setcolorspace color aload pop ColorSpace 3 get exec setcolor}
ifelse}bd/separate_color{currentdict false/PlateIndex -1 def 0 1 num 1 sub{dup
names exch get SeparationPlateName eq{/PlateIndex xd exit}if pop}for PlateIndex
0 ge{color PlateIndex get dup 0 gt{SeparateInColor{num 1 sub{0}repeat num
PlateIndex roll ColorSpace create_devicen_color/convert_to_cmyk dexec true}{1
exch sub create_grayscale_color true}ifelse 4 2 roll pop pop}{pop}ifelse}if}bd
/get_ink_as_spot{dup/indexInk xd dup color exch get exch names exch get[1.0 num
1 sub{0}repeat num indexInk roll ColorSpace 3 get exec]ColorSpace 2 get
create_spot_color}bd currentdict end def/create_devicen_colorspace{
/numColorants xd load/alternativeSpace xd bind/tintTransform exch def/names xd
[/DeviceN names alternativeSpace/tintTransform load]}bd/create_devicen_color{
DevicenColorSpec 9 dict copy begin dup type/arraytype ne{
create_devicen_colorspace}if/ColorSpace xd/num ColorSpace 1 get length def
/names ColorSpace 1 get def num array astore/color xd currentdict end}bd
/RegistrationColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel
/Registration def/ColorSpace{[/Separation/All DocCmykSpace{dup dup dup}]}def
/names[/All]def/set_color{ColorSeparationLevel1{DocGrayScaleSpace
safe_setcolorspace color aload pop 1 exch sub setcolor}{ColorSpace
safe_setcolorspace color aload pop setcolor}ifelse}bd/separate_color{
SeparateInColor{convert_to_cmyk true}{color aload pop 1 exch sub
create_grayscale_color true}ifelse}bd/convert_to_cmyk{color aload pop dup dup
dup create_cmyk_color}bd currentdict end def/create_registration_color{
RegistrationColorSpec 9 dict copy begin 1 array astore/color xd currentdict end
}bd/LabColorSpec ColorSpec 9 dict copy begin/names{/L/a/b}def/num 3 def
/ColorModel/Lab def/ColorSpace DocLabSpace def/separate_color{convert_to_cmyk
/separate_color dexec}bd/convert_to_cmyk{0 0 0 0 create_cmyk_color}bd
currentdict end def/create_lab_color{LabColorSpec 9 dict copy begin 3 array
astore/color exch def/ColorSpace DocLabSpace def currentdict end}bd
/set_solid_fill{/FillColor xd/$fil 0 def}bd/set_outline{/OutlineColor xd}bd
/CheckLevelCompatibility{/DocPsLevel where{pop DocPsLevel get_ps_level gt{@np
/Courier findfont 12 scalefont setfont 72 144 m
(The PostScript level of Corel document is higher than the PostScript)show 72
132 m(level of this device. Change the PS Level in the Corel application)show
72 120 m(by selecting the PostScript tab in the print dialog, and selecting)
show 72 108 m(document level from the Compatibility drop down list.)show flush
spg quit}if}if}bd/@BeginSysCorelDict{systemdict/Corel30Dict known{systemdict
/Corel30Dict get exec}if systemdict/CorelLexDict known{1 systemdict
/CorelLexDict get exec}if}bd/@EndSysCorelDict{systemdict/Corel30Dict known
{end}if/EndCorelLexDict where{pop EndCorelLexDict}if}bd/AutoFlatness where{pop
AutoFlatness{/@ifl{dup currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if}if/@ssa Level2{{true
setstrokeadjust}}{{}}ifelse bd/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M
/setmiterlimit ld/w/setlinewidth ld/O{/FillOverprint xd}bd/R{/OutlineOverprint
xd}bd/W/eoclip ld/c/curveto ld/C/c ld/l/lineto ld/L/l ld/rl/rlineto ld/m
/moveto ld/n/newpath ld/N/newpath ld/P{11 rp}bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld
/Q/@gr ld/&{}bd/@j{@sv @np}bd/@J{@rs}bd/g{1 exch sub 0 0 0 4 roll 3
create_cmyk_color set_solid_fill/$fil 0 def}bd/G{1 sub neg 0 0 0 4 -1 roll
create_cmyk_color set_outline}bd/i{dup 0 ne{setflat}{pop}ifelse}bd/v{4 -2 roll
2 copy 6 -2 roll c}bd/V/v ld/y{2 copy c}bd/Y/y ld/@w{matrix rotate/$ptm xd
matrix scale $ptm dup concatmatrix/$ptm xd 1 eq{$ptm exch dup concatmatrix
/$ptm xd}if/patternScallingMatrix where{pop patternScallingMatrix $ptm matrix
concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd{/$scp xd/$sca xd/$scf xd}if
}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}if}bd/@D{2 index 0 eq{$dsf 3 1
roll 4 -1 roll pop}if 3 copy exch $Scra add exch load SetScr/$dsp xd/$dsa xd
/$dsf xd}bd/$ngx{$SDF{$SCF SeparationMode/Composite eq{$SCA}{$dsa}ifelse $SCP
@ss}if}bd/min{2 copy le{pop}{exch pop}ifelse}bd/max{2 copy ge{pop}{exch pop}
ifelse}bd/in_range{3 -1 roll min max}bd/InRange/in_range load bd/@sqr{dup 0 rl
dup 0 exch rl neg 0 rl @cp}bd/currentscale{1 0 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt 0 1 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup
3 -1 roll eq{1 add}if}bd/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch
pop abs 1 exch sub}bd/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}
if exch}repeat pop}bd/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy min min 3{
dup 5 -1 roll sub neg exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul
add 1 index .114 mul add 4 1 roll pop pop pop}bd/WaldoColor_5 where{pop}{
/CorelImage systemdict/image get def/CorelSetGray systemdict/setgray get def
/CorelGetGray systemdict/currentgray get def/CorelSetTransfer systemdict
/settransfer get def/CorelGetTransfer systemdict/currenttransfer get def
/SetRgb/setrgbcolor ld/GetRgb/currentrgbcolor ld/SetGry/setgray ld/GetGry
/currentgray ld/SetRgb2 systemdict/setrgbcolor get def/GetRgb2 systemdict
/currentrgbcolor get def/SetHsb systemdict/sethsbcolor get def/GetHsb
systemdict/currenthsbcolor get def/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll
dup floor sub 3 1 roll SetHsb GetRgb2}bd/setcmykcolor where{pop/LumSepsDict
where{pop/SetCmyk_5{LumSepsDict/setcmykcolor get exec}def}{/AldusSepsDict where
{pop/SetCmyk_5{AldusSepsDict/setcmykcolor get exec}def}{/SetCmyk_5
/setcmykcolor ld}ifelse}ifelse}{/setcmykcolor{create_cmyk_color
/separate_set_color dexec/$ffpnt xd}bd/SetCmyk_5{cmyk2rgb SetRgb}bd}ifelse
/currentcmykcolor where{pop/GetCmyk/currentcmykcolor ld}{/GetCmyk{GetRgb
rgb2cmyk}bd}ifelse/setoverprint where{pop}{/setoverprint{/CurrentOverprint xd}
bd}ifelse/currentoverprint where{pop}{/currentoverprint{CurrentOverprint}bd}
ifelse/colorimage where{pop/ColorImage{colorimage}def}{/ColorImage{/ncolors xd
/$multi xd $multi true eq{ncolors 3 eq{/daqB xd/daqG xd/daqR xd pop pop exch
pop abs{daqR pop daqG pop daqB pop}repeat}{/daqK xd/daqY xd/daqM xd/daqC xd pop
pop exch pop abs{daqC pop daqM pop daqY pop daqK pop}repeat}ifelse}{/dataaq xd
{dataaq ncolors dup 3 eq{/$dat xd 0 1 $dat length 3 div 1 sub{dup 3 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
rgb2g 255 mul cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length 3 idiv
getinterval pop}{4 eq{/$dat xd 0 1 $dat length 4 div 1 sub{dup 4 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
$dat 4 index 3 add get 255 div cmyk2rgb rgb2g 255 mul cvi exch pop $dat 3 1
roll put}for $dat 0 $dat length ncolors idiv getinterval}if}ifelse}image}
ifelse}bd}ifelse/currentcmykcolor{GetCmyk}bd/sethsbcolor{hsb2rgb setrgbcolor}
bd/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE/image ld/image
{InsideDCS{IMAGE}{/EPSDict where{pop SeparationMode/Composite eq{IMAGE}{dup
type/dicttype eq{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent get 8
eq exch/BitsPerComponent get 1 eq or currentcolorspace 0 get DocGrayScaleSpace
eq and{SeparationPlateName(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get
abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{
SeparationPlateName(Black)eq{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}
repeat}ifelse}{IMAGE}ifelse}ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/$fm 0
def/wfill{1 $fm eq{fill}{eofill}ifelse}bd/@Pf{@sv SeparationMode/Composite eq{
true}{$Psc 0 ne or $ink_5 3 eq or}ifelse{0 J 0 j[]0 d FillOverprint
safe_setoverprint FillColor/separate_set_color dexec pop $ctm setmatrix 72 1000
div dup matrix scale dup concat dup Bburx exch Bbury exch itransform ceiling
cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch itransform floor cvi
/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec}{1 SetGry wfill}
ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp @ss}if
FillOverprint safe_setoverprint $fil 1 eq{CorelPtrnDoFill}{$fil 2 eq
{gradient_fill}{$fil 3 eq{@Pf}{get_simulate_devicen FillColor/ColorModel get
/DeviceN eq and{0 1 FillColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if
FillColor/get_ink_as_spot dexec/set_color dexec @gs wfill @gr}for}{FillColor
/separate_set_color dexec{wfill}{@np}ifelse}ifelse}ifelse}ifelse}ifelse $sdf{
$dsf $dsa $dsp @ss}if setmatrix}bd/f{@cp F}bd/S{matrix currentmatrix $ctm
setmatrix $SDF{$SCF $SCA $SCP @ss}if OutlineOverprint safe_setoverprint
get_simulate_devicen OutlineColor/ColorModel get/DeviceN eq and{0 1
OutlineColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if OutlineColor
/get_ink_as_spot dexec/set_color dexec matrix currentmatrix $ptm concat @gs
stroke @gr setmatrix}for}{OutlineColor/separate_set_color dexec{matrix
currentmatrix $ptm concat stroke setmatrix}{@np}ifelse}ifelse $SDF{$dsf $dsa
$dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S}bd/b{@cp B}bd/_E{5 array
astore exch cvlit xd}bd/@cc{currentfile $dat readhexstring pop}bd/@sm{/$ctm
$ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd/Bblly xd/Bbllx xd}bd/@c{@cp}bd
/@P{/$fil 3 def/$Psn xd/$Psc xd array astore/$Prm xd}bd/tcc{@cc}def/@B{@gs S
@gr F}bd/@b{@cp @B}bd/init_separation{/SeparationMode where{pop}{
/SeparationMode/Composite def}ifelse/SeparationPlateName where{pop}{
/SeparationPlateName null def}ifelse/SeparateInColor where{pop}{
/SeparateInColor false def}ifelse SeparationMode/Composite eq{
/SeparationPlateIndex -1 def}{/SeparationPlateIndex 4 def}ifelse/CmykPlates[
/Cyan/Magenta/Yellow/Black]def 0 1 3{dup CmykPlates exch get
SeparationPlateName eq{/SeparationPlateIndex xd exit}if pop}for
/CurrentInkName_5 SeparationPlateName def/$ink_5 SeparationPlateIndex def
SeparationMode/OnHost eq{/SepMode_5 2 def}{/SepMode_5 0 def}ifelse/SepsColor
SeparateInColor def}bd/init_separation_from_legacy{EpsFile{/SepMode_5 where{
pop SepMode_5 2 eq{/SeparationMode/OnHost def}{/SeparationMode/Composite def}
ifelse}if/CurrentInkName_5 where{pop/SeparationPlateName CurrentInkName_5 def}
if/$ink_5 where{pop/SeparationPlateIndex $ink_5 def}if/SepsColor where{pop
/SeparateInColor SepsColor def}if}if}bd init_separation_from_legacy/@whi{@gs
-72000 dup m -72000 72000 l 72000 dup l 72000 -72000 l @cp 1 SetGry fill @gr}
bd/@neg{[{1 exch sub}/exec cvx currenttransfer/exec cvx]cvx settransfer @whi}
bd/deflevel 0 def/@sax{/deflevel deflevel 1 add def}bd/@eax{/deflevel deflevel
dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{eax}ifelse}bd/eax{{exec}forall}
bd/@rax{deflevel 0 eq{@rs @sv}if}bd systemdict/pdfmark known not{/pdfmark
/cleartomark ld}if/wclip{1 $fm eq{clip}{eoclip}ifelse}bd
%----------------------------------------------------------------------------
% Raster images support
/set_image_clipping{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index
3 index l 3 index 3 index l clip pop pop pop pop}bd/set_image_parameters{/$frg
xd/$bkg xd/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd}bd
/output_image{/@cc xd @sm @gs set_image_clipping set_image_parameters
SeparationMode/OnHost eq EpsFile and{separate_output_image}{
output_composite_image}ifelse @gr $ctm setmatrix}bd/output_composite_image{
DocPsLevel 3 eq MaskedImage true eq and{output_masked_image}{$bts 1 gt
DocPsLevel 2 eq DocPsLevel 3 eq or and{DevicenImage{output_devicen_image}{
output_color_image}ifelse}{$bts 1 eq{output_monochrome_image}{
output_color_image_level1}ifelse}ifelse}ifelse}bd/separate_output_image{@gs
$bts 1 gt{separate_output_color_image}{separate_output_monochrome_image}ifelse
@gr not{currentoverprint not{1.0 SetGry wfill}if}if @np}bd/set_decode_filter{
ImageCompression/JPEG eq{/DCTDecode filter}{ImageCompression/RLE eq{
/RunLengthDecode filter}{ImageCompression/LZW eq{/LZWDecode filter}if}ifelse}
ifelse}bd/create_datasource{currentfile DevicenImage not get_ps_level 2 gt or{
/ASCII85Decode filter}if set_decode_filter}bd/set_image_strip_parameters{
/stripRows xd/numPlanes xd/stripBuffer $wid $bts mul $ncl mul stripRows mul 8
div ceiling cvi dup 65535 gt{pop $ncl $bts mul}if string def DevicenImage{
/readstrip{DataSource stripBuffer readhexstring pop}bd}{/readstrip{DataSource
stripBuffer readstring pop}bd}ifelse/stripHeight $lly $ury sub stripRows mul
$hei div def/stripOutBuffer $wid stripRows mul numPlanes mul 65535 min string
def/strip_img_dict 8 dict def strip_img_dict begin/ImageType 1 def/Width $wid
def/Height stripRows def/BitsPerComponent $bts def/Decode[numPlanes{0 1}
repeat]def/ImageMatrix[$wid 0 0 stripRows neg 0 $hei 0 gt{stripRows}{0}ifelse]
def/DataSource stripOutBuffer def end}bd/separate_output_color_image{
/plateContent false def $ncl 1 eq{SeparationPlateName/Black eq{
output_color_image/plateContent true def}if}{@np/DataSource create_datasource
def SeparateInColor{DocCmykSpace setcolorspace/numPlanes 4 def}{
DocGrayScaleSpace setcolorspace/numPlanes 1 def}ifelse/stripRows 65535 $wid
$bts mul $ncl numPlanes max mul 8 div div floor cvi 1 max def numPlanes
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{numPlanes $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 $wid stripRows mul 1 sub{/pixelIndex xd stripBuffer
pixelIndex $ncl mul $ncl getinterval{255 div}forall DevicenImage{
ImageDevicenSpace create_devicen_color}{$ncl 3 eq{create_rgb_color}{
create_cmyk_color}ifelse}ifelse/separate_color dexec{/plateContent true def
begin color aload pop end}{pop numPlanes[numPlanes 1 eq{1}{0}ifelse]cvx repeat
}ifelse numPlanes array astore/pixelSepIndex pixelIndex numPlanes mul def
/posColorant 0 def{stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}ifelse plateContent}bd/separate_output_monochrome_image{
SeparationPlateName/Black eq{output_monochrome_image true}{false}ifelse}bd
/output_monochrome_image{$frg 1 eq{OutlineOverprint safe_setoverprint
ImageForegroundColor/separate_set_color dexec{1}{0}ifelse/$frg xd}{/$frg false
def}ifelse $bkg 1 eq{@gs $ctm setmatrix F @gr}if @np/$dat $wid $bts mul 8 div
ceiling cvi 65535 min string def $bkg $frg add 1 ge{$SDF{$SCF $SCA $SCP @ss}if
$llx $lly Tl $urx $llx sub $ury $lly sub scale $bkg 1 eq{FillColor
/separate_set_color dexec pop}if $wid $hei abs $bts 1 eq{$bkg 1 ge}{$bts 1 ge}
ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load $bts 1 eq
{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}repeat}
ifelse}bd/output_color_image_level1{@np $ngx $llx $lly Tl $urx $llx sub $ury
$lly sub scale $wid $hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse
]/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min string def $msimage
false eq $ncl 1 eq or{/@cc load false $ncl ColorImage}{$wid $bts mul 8 div
ceiling cvi $ncl 3 eq{dup dup/$dat1 exch string def/$dat2 exch string def
/$dat3 exch string def/@cc1 load/@cc2 load/@cc3 load}{dup dup dup/$dat1 exch
string def/$dat2 exch string def/$dat3 exch string def/$dat4 exch string def
/@cc1 load/@cc2 load/@cc3 load/@cc4 load}ifelse true $ncl ColorImage}ifelse
$SDF{$dsf $dsa $dsp @ss}if}bd/@cc1{currentfile $dat1 readhexstring pop}bd/@cc2
{currentfile $dat2 readhexstring pop}bd/@cc3{currentfile $dat3 readhexstring
pop}bd/@cc4{currentfile $dat4 readhexstring pop}bd/$msimage false def
/ImageCompression/None def/MaskedImage false def/DevicenImage false def
/output_color_image{@np $ncl 1 eq{DocGrayScaleSpace}{$ncl 3 eq{DocRgbSpace}
{DocCmykSpace}ifelse}ifelse setcolorspace/$dat $wid $bts mul $ncl mul 8 div
ceiling cvi 65535 min string def $ngx $llx $lly Tl $urx $llx sub $ury $lly sub
scale 8 dict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def currentdict
end image $SDF{$dsf $dsa $dsp @ss}if}bd/simulate_devicen_image{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def/DataSource create_datasource def
/stripRows 65535 $wid $bts mul $ncl mul 8 div div floor cvi 1 max def 1
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{1 $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs $llx $t_lly Tl $urx $llx sub $t_ury $t_lly sub scale 0 1 $ncl
1 sub{@gs/inkIndex exch def 0 1 stripOutBuffer length 1 sub{dup $ncl mul
inkIndex add stripBuffer exch get stripOutBuffer 3 1 roll put}for[/Separation
colorantNames inkIndex get altColorSpace{$ncl 1 sub{0}repeat $ncl inkIndex roll
tintProc}]setcolorspace inkIndex 0 gt{true setoverprint}if strip_img_dict image
@gr}for @gr}for $SDF{$dsf $dsa $dsp @ss}if}bd/output_devicen_image_alt{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def altColorSpace DocCmykSpace eq{
/numAltChannels 4 def}{altColorSpace DocRgbSpace eq{/numAltChannels 3 def}{
/numAltChannels 1 def}ifelse}ifelse/DataSource create_datasource def
altColorSpace setcolorspace/stripRows 65535 $wid $bts mul $ncl numAltChannels
max mul 8 div div floor cvi 1 max def numAltChannels stripRows
set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling cvi 1 sub
def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight stripIndex
mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi def
stripIndex maxStripIndex eq{numAltChannels $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 stripBuffer length $ncl div cvi 1 sub{/pixelIndex xd
stripBuffer pixelIndex $ncl mul $ncl getinterval{255 div}forall tintProc exec
numAltChannels array astore/pixelAltIndex pixelIndex numAltChannels mul def
/posColorant 0 def{stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}bd/output_devicen_image_native{@np $ngx ImageDevicenSpace
setcolorspace/scanline $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def/readscanline{currentfile scanline readhexstring pop}bind def $llx
$lly Tl $urx $llx sub $ury $lly sub scale 8 dict begin/ImageType 1 def/Width
$wid def/Height $hei abs def/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]
def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource{
readscanline}def currentdict end image $SDF{$dsf $dsa $dsp @ss}if}bd
/output_devicen_image{Level3{output_devicen_image_native}{get_simulate_devicen
{simulate_devicen_image}{output_devicen_image_alt}ifelse}ifelse}bd
/output_masked_image{/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def $ngx DevicenImage{ImageDevicenSpace}{$ncl 1 eq{DocGrayScaleSpace}{
$ncl 3 eq{DocRgbSpace}{DocCmykSpace}ifelse}ifelse}ifelse setcolorspace $llx
$lly Tl $urx $llx sub $ury $lly sub scale/ImageDataDict 8 dict def
ImageDataDict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def end
/MaskedImageDict 7 dict def MaskedImageDict begin/ImageType 3 def
/InterleaveType 3 def/MaskDict ImageMaskDict def/DataDict ImageDataDict def end
MaskedImageDict image $SDF{$dsf $dsa $dsp @ss}if}bd/set_image_mask{/$mbts xd
/$mhei xd/$mwid xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def
/Width $mwid def/Height $mhei abs def/BitsPerComponent $mbts def/DataSource
maskstream def/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]
def/Decode[1 0]def end}bd/@daq{dup type/arraytype eq{aload pop}if}bd
/skip_image_body{8 rp/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd
/$wid xd DevicenImage not ImageCompression/JPEG eq or ImageCompression/RLE eq
or ImageCompression/LZW eq or{create_datasource flushfile}{/scanline $wid $bts
mul $ncl mul 8 div ceiling cvi dup 65535 gt{pop $bts $ncl mul}if string def
/upperBound $wid $hei mul $bts mul $ncl mul scanline length div cvi 1 sub def 0
1 upperBound{pop currentfile scanline readhexstring pop pop}for}ifelse}bd
/disable_raster_output{deflevel 0 eq{@rs}if/output_image load
/output_image_original exch def/output_image/skip_image_body load def
globaldict begin/bSkipDeviceNImage true def end deflevel 0 eq{@sv}if}def
/enable_raster_output{deflevel 0 eq{@rs}if/bSkipDeviceNImage where{
/bSkipDeviceNImage undef/output_image/output_image_original load def}if
deflevel 0 eq{@sv}if}def
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel17Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 612 792
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
0.00000 0.00000 2999.99962 2999.99962 @E
/$fm 0 def
0 J 0 j 22.925585626053735 setmiterlimit
[] 0 d 0 R 0 @G
0.0000 0.0000 0.0000  create_rgb_color set_outline
0 0.56693 0.56693 0.00000 @w
0.00000 2999.99962 m
2999.99962 2999.99962 L
2999.99962 0.00000 L
0.00000 0.00000 L
0.00000 2999.99962 L
@c
S

@rax %Note: Object
844.01461 1344.20230 937.61802 1930.73726 @E
/$fm 0 def
 0 O 0 @g
0.5608 0.6392 0.6784  create_rgb_color set_solid_fill
844.01461 1913.13043 m
844.18809 1344.22639 L
936.72595 1344.20230 L
937.48054 1350.96265 938.22746 1910.47635 936.84557 1930.72876 C
928.61518 1931.00655 899.25392 1924.21531 890.33556 1922.62904 C
879.84737 1920.76328 851.86772 1917.43427 844.01461 1913.13043 C
@c
F

@rax %Note: Object
1793.49506 1344.53537 2132.31572 1523.98630 @E
/$fm 0 def
 0 O 0 @g
0.5608 0.6392 0.6784  create_rgb_color set_solid_fill
1925.99972 1523.94661 m
1912.91839 1508.69225 1910.76293 1510.25216 1893.71027 1497.20740 C
1889.55383 1494.02778 1887.20901 1492.75417 1883.39556 1488.61616 C
1878.61521 1483.42932 1879.25726 1485.01729 1875.03307 1481.80082 C
1872.11055 1479.57562 1870.73376 1476.93969 1868.08932 1473.93468 C
1854.66586 1458.68088 1855.79830 1461.25616 1841.64293 1442.28841 C
1829.14724 1425.88431 L
1826.06287 1421.68337 1824.33855 1418.23247 1821.36161 1413.60548 C
1819.94258 1411.39984 1818.99808 1409.80961 1817.53228 1407.47074 C
1795.47137 1352.20706 L
1793.81849 1348.01036 1793.35446 1351.65203 1793.53020 1344.53537 C
2132.31572 1344.63827 L
2132.13033 1348.30545 2130.25833 1351.86350 2128.77581 1354.70381 C
2122.94013 1366.64617 L
2115.99411 1384.09682 2107.86180 1393.45172 2098.17950 1408.15020 C
2093.23389 1415.65833 2083.56463 1427.81499 2076.62740 1434.63600 C
2074.37754 1436.84844 2073.19096 1438.72611 2071.03209 1441.04457 C
2052.65112 1458.65764 L
2011.50680 1489.45351 L
2000.73288 1496.43213 1993.04277 1499.08280 1980.29707 1506.26778 C
1970.22302 1511.94699 1936.67641 1524.79049 1925.99972 1523.94661 C
@c
F

@rax %Note: Object
749.99991 1120.50709 2249.99972 2126.53729 @E
/$fm 0 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
844.79896 1250.13345 m
990.38324 1249.68557 L
994.58561 1250.27320 1711.93351 1251.47367 1725.50891 1249.66261 C
1765.99984 1250.13345 L
1890.88923 1250.13345 2019.61191 1249.00157 2144.01061 1250.14819 C
2154.13767 1250.24145 2156.05389 1251.45043 2156.12844 1241.05748 C
2156.18287 1233.45666 2157.37909 1226.23200 2153.52170 1221.47036 C
2147.25883 1213.73887 2127.72643 1216.79603 2115.99978 1216.79603 C
896.99981 1216.79603 L
869.16869 1216.79603 851.01619 1211.61260 845.10624 1228.36507 C
843.21808 1233.71717 843.86551 1243.55083 844.79896 1250.13345 C
@c
2249.99972 1267.80661 m
2249.99972 1216.64835 L
2249.77124 1211.82435 2249.44980 1208.26063 2249.01411 1206.98532 C
2248.46022 1205.53937 L
2247.64753 1202.59701 2248.26576 1201.70976 2247.29546 1198.70391 C
2241.40564 1180.45701 2230.86954 1163.26035 2216.75556 1150.24394 C
2211.40998 1145.58973 L
2211.26003 1145.44885 2211.05367 1145.23654 2210.90258 1145.09707 C
2199.70517 1137.29443 L
2192.13723 1132.22268 2184.04460 1129.33077 2175.33685 1126.66252 C
2162.14866 1123.85083 L
2158.92397 1123.37546 2159.29020 1122.79266 2156.73109 1122.26854 C
2153.34680 1121.57546 2145.86362 1121.70274 2142.72652 1121.27301 C
2131.43839 1119.72728 990.35915 1120.99975 873.99978 1120.99975 C
867.86192 1120.99975 850.20208 1121.24721 845.47417 1122.47405 C
841.38746 1123.53477 844.52939 1123.55178 838.99191 1123.99172 C
831.83754 1124.56035 825.81250 1126.83175 819.42038 1129.42035 C
800.80809 1138.80813 L
800.61761 1138.91953 800.35824 1139.05644 800.16831 1139.16813 C
793.14208 1144.14180 L
791.64879 1145.25893 790.60507 1145.99339 789.16309 1147.16324 C
777.87638 1157.87650 L
777.73635 1158.02702 777.52942 1158.23849 777.38882 1158.38901 C
774.19871 1162.19877 L
772.50699 1164.57591 772.91065 1164.10535 771.07776 1166.07770 C
770.09613 1167.09619 L
769.90592 1167.31644 769.36989 1167.95906 769.19556 1168.19546 C
758.59228 1186.59231 L
755.23408 1193.72513 753.70082 1201.16580 751.53373 1208.53361 C
750.41235 1211.41247 L
750.24822 1212.00888 750.11244 1212.62202 749.99991 1213.24819 C
749.99991 1231.99994 L
749.99991 1936.99984 L
749.99991 1963.68265 L
750.13228 1964.76888 750.30435 1965.71537 750.52602 1966.47364 C
759.54246 1983.45713 L
773.72646 1995.27335 L
788.79997 2002.77865 793.34164 1999.98000 802.16901 2002.83052 C
804.57562 2003.60778 801.19446 2002.85376 805.14652 2003.85326 C
888.96614 2019.03364 L
894.85625 2019.33950 896.60466 2021.03518 900.26844 2021.73137 C
906.38277 2022.89272 907.22494 2021.64038 913.24346 2023.75616 C
938.96929 2028.03052 L
944.03735 2028.45317 944.46142 2030.57688 950.03802 2030.96154 C
957.07843 2031.44769 956.24220 2031.64243 962.59181 2033.40784 C
967.74661 2034.84104 970.19206 2033.28028 975.75647 2035.24299 C
1025.27320 2044.72658 L
1029.33581 2045.88454 1034.05039 2045.48939 1038.29244 2046.70715 C
1040.81839 2047.43197 1039.98359 2047.55613 1043.69074 2048.30901 C
1045.29317 2048.63443 1047.25672 2048.76794 1050.00321 2048.99641 C
1055.06929 2049.41764 1057.50510 2050.88230 1062.42180 2051.57764 C
1086.70706 2056.29250 L
1090.56954 2057.40113 1094.92271 2057.02554 1098.93855 2058.06104 C
1136.41058 2065.58901 L
1141.88400 2066.71946 1143.16554 2065.45975 1148.63528 2067.36435 C
1173.98268 2072.01685 L
1179.98022 2072.34113 1181.31987 2074.33956 1186.12573 2074.87361 C
1260.51392 2088.48586 L
1264.80671 2089.68661 1268.32507 2089.41080 1272.70006 2090.29946 C
1275.30850 2090.82926 1275.20986 2091.31172 1278.96123 2092.03824 C
1328.96296 2101.03654 L
1336.67745 2101.59836 1336.62019 2103.30879 1346.95814 2104.04126 C
1352.11720 2104.40693 1353.71169 2106.46205 1359.05811 2106.94167 C
1408.02151 2115.97795 L
1411.68302 2116.12592 1412.05436 2115.64290 1415.31449 2116.68520 C
1427.86828 2119.13121 L
1430.72759 2119.51417 1430.85940 2120.00939 1433.21584 2120.78381 C
1438.07414 2122.38028 1440.84813 2121.32069 1445.53181 2122.46759 C
1451.11861 2123.83587 1464.40658 2126.91600 1469.72239 2126.49874 C
1473.64016 2126.19090 1481.89720 2124.90113 1485.26050 2123.26044 C
1495.84961 2117.84967 L
1496.02762 2117.73203 1496.26913 2117.56450 1496.44233 2117.44233 C
1504.79178 2109.79162 L
1506.02003 2108.34822 1506.78652 2107.37169 1507.87417 2105.87386 C
1508.60268 2104.87039 1508.70841 2104.73915 1509.51033 2103.51033 C
1511.73326 2099.73317 L
1511.86904 2099.45820 1512.23187 2098.64239 1512.35745 2098.35751 C
1517.43742 2086.43726 L
1518.34365 2084.27783 1518.54520 2082.82479 1519.50359 2080.50350 C
1521.48954 2075.48957 L
1521.82346 2074.67178 1522.68463 2072.98998 1522.77987 2072.77965 C
1523.64132 2070.87931 1523.06589 2072.35389 1523.89020 2069.89002 C
1524.34063 2068.34060 L
1524.42510 2068.10277 1524.51156 2067.83376 1524.60170 2067.60161 C
1530.01672 2054.01657 L
1531.26567 2050.75077 1530.13635 2053.55565 1531.23902 2051.23890 C
1573.10192 1945.10183 L
1573.19575 1944.88157 1573.30998 1944.62391 1573.39786 1944.39770 C
1573.48800 1944.16583 1573.57474 1943.89682 1573.65893 1943.65899 C
1580.57688 1925.57679 L
1580.67043 1925.36107 1580.79798 1925.10737 1580.89550 1924.89562 C
1645.29836 1769.29852 L
1645.41146 1769.11398 1645.57729 1768.87474 1645.69039 1768.69049 C
1662.64214 1741.64230 L
1662.76176 1741.46542 1662.91937 1741.21569 1663.04239 1741.04220 C
1667.14356 1736.14337 L
1673.68450 1727.98186 1679.80309 1719.62532 1687.24772 1712.24759 C
1702.68009 1697.68006 L
1704.28195 1696.31008 1704.73124 1695.83556 1706.41814 1694.41824 C
1721.08885 1683.08901 L
1722.20400 1682.15669 1721.66145 1682.52746 1722.70431 1681.70428 C
1730.78561 1675.32633 1740.41036 1669.61650 1749.87184 1664.87187 C
1751.46605 1664.07250 1752.64129 1663.47213 1754.53030 1662.53046 C
1758.44721 1660.57795 1760.66362 1659.48151 1764.55361 1657.55367 C
1791.08986 1647.08986 L
1794.85483 1646.10539 1793.02337 1646.68706 1796.32998 1645.33011 C
1807.00809 1642.00819 L
1809.44164 1641.24283 1811.04831 1641.36869 1813.65676 1640.65691 C
1816.50614 1639.87965 1814.79628 1639.84932 1818.75969 1638.75969 C
1826.46850 1636.63994 1835.81717 1636.44350 1843.25244 1634.25260 C
1869.10639 1630.10636 L
1875.65443 1629.28346 1883.04860 1629.87449 1889.73581 1628.73581 C
1891.35893 1628.45972 1893.65641 1627.51465 1895.24154 1627.24139 C
1899.45298 1626.51543 1905.01058 1626.89272 1908.32910 1626.32920 C
1914.78274 1625.23276 1913.84504 1624.33474 1920.95943 1623.95943 C
1923.97068 1623.80041 1924.79641 1623.72557 1927.12564 1623.12576 C
1939.60063 1620.60066 L
1942.02737 1620.08844 1942.88060 1619.27830 1944.70866 1618.70882 C
1947.68872 1617.78047 1948.54734 1618.29298 1951.58154 1617.58148 C
1954.41647 1616.91704 1954.98397 1616.06693 1956.56910 1615.56917 C
1959.41480 1614.67569 1960.37150 1615.24375 1963.27956 1614.27969 C
1984.78176 1606.78176 L
1986.86665 1605.95915 1985.90117 1606.49575 1987.88258 1605.88261 C
1989.40507 1605.40526 L
1989.63184 1605.31880 1989.88554 1605.19861 1990.10523 1605.10535 C
2025.08476 1590.08485 L
2025.28261 1589.97969 2025.53263 1589.83597 2025.73304 1589.73307 C
2029.16466 1588.16494 L
2030.38044 1587.55691 2031.08145 1587.08523 2031.08400 1587.08381 C
2031.28243 1586.97921 2031.53216 1586.83550 2031.73285 1586.73288 C
2038.39427 1583.39424 L
2038.59524 1583.28907 2038.85802 1583.16435 2039.06013 1583.06003 C
2068.70343 1565.70350 L
2071.95250 1563.79068 2074.04050 1561.96148 2077.04721 1560.04724 C
2081.71474 1556.71483 L
2081.88142 1556.58784 2082.11839 1556.41209 2082.28535 1556.28539 C
2082.45203 1556.15868 2082.68617 1555.97953 2082.85313 1555.85339 C
2092.00762 1549.00772 L
2092.17033 1548.87761 2092.40249 1548.69506 2092.56690 1548.56693 C
2114.63150 1530.63156 L
2116.23109 1529.24202 2116.76315 1528.59402 2118.30576 1527.30567 C
2166.54435 1475.54447 L
2167.71506 1474.10702 2166.29093 1475.90135 2167.43301 1474.43301 C
2210.40142 1405.40145 L
2210.50233 1405.19650 2210.63244 1404.93883 2210.73676 1404.73672 C
2210.83965 1404.53717 2210.98620 1404.28885 2211.09137 1404.09128 C
2212.48658 1401.48652 L
2213.06088 1400.18428 2213.01836 1399.90337 2213.58189 1398.58186 C
2225.51858 1370.51858 L
2226.66463 1367.71200 2225.86554 1370.13506 2226.65726 1367.65729 C
2234.98346 1342.98340 L
2236.17600 1339.92765 2235.53877 1340.96400 2236.27606 1337.27613 C
2239.29808 1325.29833 L
2240.28085 1320.59650 2241.47679 1318.92888 2242.05279 1313.05266 C
2242.59676 1307.50157 2244.72019 1307.55146 2244.99005 1300.99011 C
2245.31830 1293.01200 2245.70324 1295.24683 2247.13304 1289.13335 C
2248.16683 1284.71386 2247.31332 1280.17814 2248.04863 1275.04885 C
2249.05068 1268.05776 2248.58183 1275.45647 2249.80101 1269.80135 C
2249.87102 1269.47735 2249.93764 1268.78740 2249.99972 1267.80661 C
@c
844.01461 1913.13043 m
851.86772 1917.43427 879.84737 1920.76328 890.33556 1922.62904 C
899.25392 1924.21531 928.61518 1931.00655 936.84557 1930.72876 C
938.22746 1910.47635 937.48054 1350.96265 936.72595 1344.20230 C
844.18809 1344.22639 L
844.01461 1913.13043 L
@c
1925.99972 1523.94661 m
1936.67641 1524.79049 1970.22302 1511.94699 1980.29707 1506.26778 C
1993.04277 1499.08280 2000.73288 1496.43213 2011.50680 1489.45351 C
2052.65112 1458.65764 L
2071.03209 1441.04457 L
2073.19096 1438.72611 2074.37754 1436.84844 2076.62740 1434.63600 C
2083.56463 1427.81499 2093.23389 1415.65833 2098.17950 1408.15020 C
2107.86180 1393.45172 2115.99411 1384.09682 2122.94013 1366.64617 C
2128.77581 1354.70381 L
2130.25833 1351.86350 2132.13033 1348.30545 2132.31572 1344.63827 C
1793.53020 1344.53537 L
1793.35446 1351.65203 1793.81849 1348.01036 1795.47137 1352.20706 C
1817.53228 1407.47074 L
1818.99808 1409.80961 1819.94258 1411.39984 1821.36161 1413.60548 C
1824.33855 1418.23247 1826.06287 1421.68337 1829.14724 1425.88431 C
1841.64293 1442.28841 L
1855.79830 1461.25616 1854.66586 1458.68088 1868.08932 1473.93468 C
1870.73376 1476.93969 1872.11055 1479.57562 1875.03307 1481.80082 C
1879.25726 1485.01729 1878.61521 1483.42932 1883.39556 1488.61616 C
1887.20901 1492.75417 1889.55383 1494.02778 1893.71027 1497.20740 C
1910.76293 1510.25216 1912.91839 1508.69225 1925.99972 1523.94661 C
@c
1709.46397 1393.43783 m
1708.85991 1383.81024 1704.63090 1376.65644 1702.67357 1367.26186 C
1695.84463 1334.48343 1695.12746 1341.57317 1675.99984 1341.57345 C
1529.99972 1341.57345 L
1500.45789 1341.57345 1043.55666 1340.28595 1030.82967 1341.85578 C
1027.64239 1355.77502 1029.72189 1400.86261 1029.72189 1417.99975 C
1029.72189 1495.81304 1028.60220 1945.83231 1030.69757 1948.99975 C
1033.95940 1952.71143 1039.73131 1951.66375 1045.84252 1952.86337 C
1048.80501 1953.44476 1050.39071 1954.29402 1052.98498 1954.70532 C
1055.69858 1955.13562 1057.34041 1954.87172 1060.10447 1955.40038 C
1062.93231 1955.94123 1064.29663 1956.81543 1067.08224 1957.40419 C
1070.31798 1958.08847 1071.73616 1957.82258 1074.81231 1958.07146 C
1081.23817 1958.59106 1095.69118 1963.54913 1103.04482 1963.91452 C
1106.51244 1964.08687 1107.49436 1963.52249 1110.44296 1964.70680 C
1120.22532 1968.63619 1120.10485 1965.92882 1124.97789 1967.36202 C
1145.38649 1972.03833 L
1154.55600 1973.97921 1165.37046 1975.06970 1174.58447 1977.47461 C
1262.08687 1992.52375 L
1266.62003 1991.94463 1270.38501 1992.08891 1274.37959 1993.72564 C
1278.87307 1995.56646 1280.53276 1994.76000 1285.25981 1995.87883 C
1298.08488 1998.91446 1352.53049 2009.49506 1362.04639 2010.10876 C
1369.31584 2010.57761 1376.50139 2012.80054 1382.88246 2014.93814 C
1386.48302 2016.14428 1390.46740 2015.43761 1394.50054 2016.51165 C
1398.28706 2017.52022 1400.62791 2018.19628 1405.11572 2018.68894 C
1412.95096 2019.54869 1434.38031 2026.21153 1438.99994 2023.93899 C
1441.92331 2022.50098 1447.18271 2005.69068 1448.61477 2001.70403 C
1450.18318 1997.33726 1451.63083 1993.28683 1452.94413 1989.86485 C
1454.40369 1986.06274 1455.72661 1983.17055 1457.33754 1979.35512 C
1458.74409 1976.02356 1458.28431 1976.85553 1459.31272 1973.13931 C
1461.98551 1963.48082 1466.94586 1954.74416 1470.49200 1945.34674 C
1472.03206 1941.26457 1473.88167 1939.82485 1474.04665 1933.94381 C
1466.73609 1930.64797 1450.13244 1928.79921 1442.19912 1925.88350 C
1383.92249 1912.34126 L
1383.66709 1912.26047 1383.41480 1912.15162 1383.16876 1912.06431 C
1382.93121 1911.97984 1382.68431 1911.85257 1382.45357 1911.76554 C
1377.52299 1909.90828 1357.10391 1908.36850 1344.15213 1903.80954 C
1327.38605 1897.90781 1319.42239 1886.60920 1313.94983 1870.00724 C
1310.99499 1861.04353 1313.26498 1851.57411 1315.84054 1843.01858 C
1319.99443 1829.22123 1336.08387 1814.85298 1350.93288 1813.63465 C
1355.72230 1813.24176 1362.20542 1813.34721 1367.04359 1813.58192 C
1374.24983 1813.93143 1374.16932 1815.43209 1380.43474 1816.38709 C
1393.98265 1819.15909 L
1408.04362 1820.71106 1418.09386 1824.89754 1432.47231 1827.70724 C
1445.23644 1830.74627 L
1447.75928 1831.29364 1450.26028 1831.07027 1452.72699 1831.57143 C
1455.85701 1832.20753 1454.51991 1832.55987 1458.60945 1833.55455 C
1460.68838 1834.06025 1463.14913 1834.08917 1465.56624 1834.67424 C
1467.77811 1835.20942 1468.46211 1835.93934 1471.49065 1836.60123 C
1473.86268 1837.11969 1476.02098 1837.09134 1478.48315 1837.67046 C
1487.79383 1839.86050 1500.29943 1845.13975 1509.99987 1844.76586 C
1512.19928 1841.65909 1523.74677 1813.23638 1522.35581 1810.69342 C
1520.38375 1807.08888 1492.06535 1800.52696 1486.69994 1799.34690 C
1484.18391 1798.79357 1482.03865 1798.90951 1479.49994 1798.32274 C
1461.50872 1793.30854 L
1456.42139 1792.20728 1454.46661 1790.70151 1449.86854 1790.08072 C
1442.35332 1789.06620 1410.73512 1780.68019 1401.88677 1776.20882 C
1388.44942 1769.41843 1376.98866 1757.04690 1374.59650 1741.85461 C
1372.73244 1730.01628 1375.97726 1720.07065 1381.14624 1711.06696 C
1391.45329 1698.48652 L
1396.88362 1693.93635 1403.98101 1690.12517 1412.28709 1688.35748 C
1424.81452 1685.69178 1429.31565 1688.92072 1440.01446 1690.78677 C
1464.78756 1697.23191 L
1472.21433 1700.30268 1481.57178 1700.91950 1489.44274 1703.51206 C
1562.84901 1721.78192 L
1575.65395 1700.99972 L
1573.88740 1697.05304 1569.45118 1696.44161 1565.50422 1694.61808 C
1472.14431 1651.68709 L
1461.80324 1647.18709 1449.65424 1639.40797 1444.02066 1629.05641 C
1439.37553 1620.52072 1438.16258 1612.45191 1438.50557 1599.96643 C
1438.64872 1594.76031 1439.90589 1589.83342 1441.84082 1585.75266 C
1446.38192 1576.17524 1453.86369 1569.03761 1463.30532 1564.14756 C
1478.98290 1556.02800 1494.44135 1557.83537 1510.21757 1565.70038 C
1516.17855 1568.67222 1522.55112 1569.80409 1528.52655 1573.50076 C
1530.63950 1574.80809 1531.45247 1575.13663 1533.92400 1576.21351 C
1567.99219 1592.90589 L
1575.44476 1596.91323 1584.17546 1599.47802 1592.27972 1602.97739 C
1603.61291 1608.60274 L
1605.84548 1609.46787 1604.20054 1608.76120 1605.70942 1609.48857 C
1620.03317 1616.03546 L
1620.21997 1616.14261 1620.45921 1616.31213 1620.64942 1616.42013 C
1626.43096 1619.56630 L
1634.83682 1624.43169 1637.15669 1626.05395 1640.95398 1624.02888 C
1645.39531 1621.66054 1648.60498 1618.63455 1652.34047 1615.33502 C
1666.41449 1602.90198 1687.37641 1589.67865 1705.08217 1581.83121 C
1709.30324 1579.96006 1709.10709 1578.11131 1713.80948 1575.96690 C
1721.51802 1572.45137 1728.98135 1569.82592 1736.31260 1566.26844 C
1740.03449 1564.46220 1743.63902 1563.10243 1747.84564 1561.69616 C
1758.98239 1557.97370 1770.29546 1552.34976 1781.90674 1550.03102 C
1786.71033 1549.07150 1789.77373 1547.37638 1794.98069 1546.92170 C
1811.71616 1545.46072 1803.34772 1541.72183 1796.57546 1534.44387 C
1757.12230 1486.93181 L
1756.99446 1486.77080 1756.81729 1486.53184 1756.69115 1486.36913 C
1756.56472 1486.20586 1756.39039 1485.96435 1756.26539 1485.79965 C
1724.53096 1430.37921 L
1724.43543 1430.18986 1724.28180 1429.95090 1724.18428 1429.76126 C
1723.48554 1428.46781 L
1720.07235 1421.44696 1709.90646 1399.69446 1709.46397 1393.43783 C
@c
F

@rax %Note: Object
1031.65569 1344.83357 1804.76759 2024.40898 @E
/$fm 0 def
 0 O 0 @g
0.8078 0.8431 0.8588  create_rgb_color set_solid_fill
1262.08687 1992.52375 m
1260.76337 1991.33178 1261.86208 1992.11726 1259.95521 1991.14894 C
1256.40454 1989.34526 1251.43937 1989.04734 1247.64917 1988.58643 C
1233.60633 1986.87855 1205.03197 1980.04394 1190.45764 1977.57581 C
1176.98797 1974.56343 L
1161.54312 1972.98737 1168.03446 1972.81191 1162.69625 1971.76252 C
1159.94976 1971.22252 1156.71770 1971.65452 1153.97150 1971.10318 C
1149.34620 1970.17455 1152.34243 1969.80066 1148.64123 1968.92220 C
1146.25219 1968.35499 1142.50139 1968.69033 1139.91534 1968.36888 C
1135.26482 1967.79118 1135.76088 1966.77383 1133.38857 1966.07452 C
1128.68787 1964.68894 1123.72299 1966.12384 1117.97150 1964.14101 C
1114.26775 1962.86428 1114.98888 1963.00063 1110.92003 1962.64403 C
1109.38422 1962.50939 1108.49301 1962.58535 1106.98271 1962.15902 C
1105.17931 1961.65020 1104.92646 1961.12183 1104.23424 1960.76239 C
1100.06476 1958.59729 1096.38992 1960.66573 1091.04293 1959.11461 C
1075.29250 1954.54517 1084.15191 1958.48759 1074.92287 1956.29301 C
1068.99449 1954.88334 1075.78630 1956.76498 1071.44759 1954.68236 C
1069.98094 1953.97824 1072.34192 1954.32123 1068.86494 1953.83112 C
1066.65987 1953.52016 1063.29033 1953.77187 1060.93276 1953.62306 C
1055.09282 1953.25427 1053.30104 1951.36894 1046.74479 1950.77849 C
1039.62841 1950.13757 1038.92343 1948.74803 1031.65569 1947.99260 C
1032.03609 1344.83357 L
1693.24923 1344.97077 L
1694.81112 1349.45887 1694.39046 1345.16948 1695.57080 1350.86570 C
1696.98019 1357.66602 1706.00598 1389.77972 1709.46397 1393.43783 C
1709.90646 1399.69446 1720.07235 1421.44696 1723.48554 1428.46781 C
1724.18428 1429.76126 L
1724.28180 1429.95090 1724.43543 1430.18986 1724.53096 1430.37921 C
1756.26539 1485.79965 L
1756.39039 1485.96435 1756.56472 1486.20586 1756.69115 1486.36913 C
1756.81729 1486.53184 1756.99446 1486.77080 1757.12230 1486.93181 C
1796.57546 1534.44387 L
1803.34772 1541.72183 1811.71616 1545.46072 1794.98069 1546.92170 C
1789.77373 1547.37638 1786.71033 1549.07150 1781.90674 1550.03102 C
1770.29546 1552.34976 1758.98239 1557.97370 1747.84564 1561.69616 C
1743.63902 1563.10243 1740.03449 1564.46220 1736.31260 1566.26844 C
1728.98135 1569.82592 1721.51802 1572.45137 1713.80948 1575.96690 C
1709.10709 1578.11131 1709.30324 1579.96006 1705.08217 1581.83121 C
1687.37641 1589.67865 1666.41449 1602.90198 1652.34047 1615.33502 C
1648.60498 1618.63455 1645.39531 1621.66054 1640.95398 1624.02888 C
1637.15669 1626.05395 1634.83682 1624.43169 1626.43096 1619.56630 C
1620.64942 1616.42013 L
1620.45921 1616.31213 1620.21997 1616.14261 1620.03317 1616.03546 C
1605.70942 1609.48857 L
1604.20054 1608.76120 1605.84548 1609.46787 1603.61291 1608.60274 C
1592.27972 1602.97739 L
1584.17546 1599.47802 1575.44476 1596.91323 1567.99219 1592.90589 C
1533.92400 1576.21351 L
1531.45247 1575.13663 1530.63950 1574.80809 1528.52655 1573.50076 C
1522.55112 1569.80409 1516.17855 1568.67222 1510.21757 1565.70038 C
1494.44135 1557.83537 1478.98290 1556.02800 1463.30532 1564.14756 C
1453.86369 1569.03761 1446.38192 1576.17524 1441.84082 1585.75266 C
1439.90589 1589.83342 1438.64872 1594.76031 1438.50557 1599.96643 C
1438.16258 1612.45191 1439.37553 1620.52072 1444.02066 1629.05641 C
1449.65424 1639.40797 1461.80324 1647.18709 1472.14431 1651.68709 C
1565.50422 1694.61808 L
1569.45118 1696.44161 1573.88740 1697.05304 1575.65395 1700.99972 C
1562.84901 1721.78192 L
1489.44274 1703.51206 L
1481.57178 1700.91950 1472.21433 1700.30268 1464.78756 1697.23191 C
1440.01446 1690.78677 L
1429.31565 1688.92072 1424.81452 1685.69178 1412.28709 1688.35748 C
1403.98101 1690.12517 1396.88362 1693.93635 1391.45329 1698.48652 C
1381.14624 1711.06696 L
1375.97726 1720.07065 1372.73244 1730.01628 1374.59650 1741.85461 C
1376.98866 1757.04690 1388.44942 1769.41843 1401.88677 1776.20882 C
1410.73512 1780.68019 1442.35332 1789.06620 1449.86854 1790.08072 C
1454.46661 1790.70151 1456.42139 1792.20728 1461.50872 1793.30854 C
1479.49994 1798.32274 L
1482.03865 1798.90951 1484.18391 1798.79357 1486.69994 1799.34690 C
1492.06535 1800.52696 1520.38375 1807.08888 1522.35581 1810.69342 C
1523.74677 1813.23638 1512.19928 1841.65909 1509.99987 1844.76586 C
1500.29943 1845.13975 1487.79383 1839.86050 1478.48315 1837.67046 C
1476.02098 1837.09134 1473.86268 1837.11969 1471.49065 1836.60123 C
1468.46211 1835.93934 1467.77811 1835.20942 1465.56624 1834.67424 C
1463.14913 1834.08917 1460.68838 1834.06025 1458.60945 1833.55455 C
1454.51991 1832.55987 1455.85701 1832.20753 1452.72699 1831.57143 C
1450.26028 1831.07027 1447.75928 1831.29364 1445.23644 1830.74627 C
1432.47231 1827.70724 L
1418.09386 1824.89754 1408.04362 1820.71106 1393.98265 1819.15909 C
1380.43474 1816.38709 L
1374.16932 1815.43209 1374.24983 1813.93143 1367.04359 1813.58192 C
1362.20542 1813.34721 1355.72230 1813.24176 1350.93288 1813.63465 C
1336.08387 1814.85298 1319.99443 1829.22123 1315.84054 1843.01858 C
1313.26498 1851.57411 1310.99499 1861.04353 1313.94983 1870.00724 C
1319.42239 1886.60920 1327.38605 1897.90781 1344.15213 1903.80954 C
1357.10391 1908.36850 1377.52299 1909.90828 1382.45357 1911.76554 C
1382.68431 1911.85257 1382.93121 1911.97984 1383.16876 1912.06431 C
1383.41480 1912.15162 1383.66709 1912.26047 1383.92249 1912.34126 C
1442.19912 1925.88350 L
1450.13244 1928.79921 1466.73609 1930.64797 1474.04665 1933.94381 C
1473.88167 1939.82485 1472.03206 1941.26457 1470.49200 1945.34674 C
1466.94586 1954.74416 1461.98551 1963.48082 1459.31272 1973.13931 C
1458.28431 1976.85553 1458.74409 1976.02356 1457.33754 1979.35512 C
1455.72661 1983.17055 1454.40369 1986.06274 1452.94413 1989.86485 C
1451.63083 1993.28683 1450.18318 1997.33726 1448.61477 2001.70403 C
1447.18271 2005.69068 1441.92331 2022.50098 1438.99994 2023.93899 C
1434.38031 2026.21153 1412.95096 2019.54869 1405.11572 2018.68894 C
1400.62791 2018.19628 1398.28706 2017.52022 1394.50054 2016.51165 C
1390.46740 2015.43761 1386.48302 2016.14428 1382.88246 2014.93814 C
1376.50139 2012.80054 1369.31584 2010.57761 1362.04639 2010.10876 C
1352.53049 2009.49506 1298.08488 1998.91446 1285.25981 1995.87883 C
1280.53276 1994.76000 1278.87307 1995.56646 1274.37959 1993.72564 C
1270.38501 1992.08891 1266.62003 1991.94463 1262.08687 1992.52375 C
@c
F

@rax %Note: Object
843.89046 1216.03833 2156.34586 1250.62271 @E
/$fm 0 def
 0 O 0 @g
0.3686 0.4784 0.5333  create_rgb_color set_solid_fill
845.10624 1228.36507 m
851.01619 1211.61260 869.16869 1216.79603 896.99981 1216.79603 C
2115.99978 1216.79603 L
2127.72643 1216.79603 2147.25883 1213.73887 2153.52170 1221.47036 C
2157.37909 1226.23200 2156.18287 1233.45666 2156.12844 1241.05748 C
2156.05389 1251.45043 2154.13767 1250.24145 2144.01061 1250.14819 C
2019.61191 1249.00157 1890.88923 1250.13345 1765.99984 1250.13345 C
1725.50891 1249.66261 L
1711.93351 1251.47367 994.58561 1250.27320 990.38324 1249.68557 C
844.79896 1250.13345 L
843.86551 1243.55083 843.21808 1233.71717 845.10624 1228.36507 C
@c
F

@rax %Note: Object
1029.05518 1340.92658 1709.46397 1992.52375 @E
/$fm 0 def
 0 O 0 @g
0.2902 0.3020 0.3059  create_rgb_color set_solid_fill
1709.46397 1393.43783 m
1706.00598 1389.77972 1696.98019 1357.66602 1695.57080 1350.86570 C
1694.39046 1345.16948 1694.81112 1349.45887 1693.24923 1344.97077 C
1032.03609 1344.83357 L
1031.65569 1947.99260 L
1038.92343 1948.74803 1039.62841 1950.13757 1046.74479 1950.77849 C
1053.30104 1951.36894 1055.09282 1953.25427 1060.93276 1953.62306 C
1063.29033 1953.77187 1066.65987 1953.52016 1068.86494 1953.83112 C
1072.34192 1954.32123 1069.98094 1953.97824 1071.44759 1954.68236 C
1075.78630 1956.76498 1068.99449 1954.88334 1074.92287 1956.29301 C
1084.15191 1958.48759 1075.29250 1954.54517 1091.04293 1959.11461 C
1096.38992 1960.66573 1100.06476 1958.59729 1104.23424 1960.76239 C
1104.92646 1961.12183 1105.17931 1961.65020 1106.98271 1962.15902 C
1108.49301 1962.58535 1109.38422 1962.50939 1110.92003 1962.64403 C
1114.98888 1963.00063 1114.26775 1962.86428 1117.97150 1964.14101 C
1123.72299 1966.12384 1128.68787 1964.68894 1133.38857 1966.07452 C
1135.76088 1966.77383 1135.26482 1967.79118 1139.91534 1968.36888 C
1142.50139 1968.69033 1146.25219 1968.35499 1148.64123 1968.92220 C
1152.34243 1969.80066 1149.34620 1970.17455 1153.97150 1971.10318 C
1156.71770 1971.65452 1159.94976 1971.22252 1162.69625 1971.76252 C
1168.03446 1972.81191 1161.54312 1972.98737 1176.98797 1974.56343 C
1190.45764 1977.57581 L
1205.03197 1980.04394 1233.60633 1986.87855 1247.64917 1988.58643 C
1251.43937 1989.04734 1256.40454 1989.34526 1259.95521 1991.14894 C
1261.86208 1992.11726 1260.76337 1991.33178 1262.08687 1992.52375 C
1174.58447 1977.47461 L
1165.37046 1975.06970 1154.55600 1973.97921 1145.38649 1972.03833 C
1124.97789 1967.36202 L
1120.10485 1965.92882 1120.22532 1968.63619 1110.44296 1964.70680 C
1107.49436 1963.52249 1106.51244 1964.08687 1103.04482 1963.91452 C
1095.69118 1963.54913 1081.23817 1958.59106 1074.81231 1958.07146 C
1071.73616 1957.82258 1070.31798 1958.08847 1067.08224 1957.40419 C
1064.29663 1956.81543 1062.93231 1955.94123 1060.10447 1955.40038 C
1057.34041 1954.87172 1055.69858 1955.13562 1052.98498 1954.70532 C
1050.39071 1954.29402 1048.80501 1953.44476 1045.84252 1952.86337 C
1039.73131 1951.66375 1033.95940 1952.71143 1030.69757 1948.99975 C
1028.60220 1945.83231 1029.72189 1495.81304 1029.72189 1417.99975 C
1029.72189 1400.86261 1027.64239 1355.77502 1030.82967 1341.85578 C
1043.55666 1340.28595 1500.45789 1341.57345 1529.99972 1341.57345 C
1675.99984 1341.57345 L
1695.12746 1341.57317 1695.84463 1334.48343 1702.67357 1367.26186 C
1704.63090 1376.65644 1708.85991 1383.81024 1709.46397 1393.43783 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel17Dict 17.0 0
%%EOF
